import pandas as pd
import openai
import os
import re
import json
from dotenv import load_dotenv

load_dotenv()

# 1. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è OpenAI API
openai.api_key = os.getenv('OPENAI_API')  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π –∫–ª—é—á


def load_csv(file_path):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV-—Ñ–∞–π–ª—É."""
    try:
        data = pd.read_csv(file_path)
        print(f"–£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ CSV-—Ñ–∞–π–ª: {len(data)} —Ä—è–¥–∫—ñ–≤, {len(data.columns)} –∫–æ–ª–æ–Ω–æ–∫.")
        return data
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
        return None


def generate_js_chart_data(data, prompt, file_name, char_limit=1000000):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö –¥–ª—è JS-—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º —Ä–æ–∑–º—ñ—Ä—É —Ç–µ–∫—Å—Ç—É."""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –≤ JSON-—Å—É–º—ñ—Å–Ω—ñ —Ç–∏–ø–∏
        data = data.astype(str).replace("nan", None)  # –ü—Ä–∏–≤–æ–¥–∏–º–æ –¥–æ —Å—Ç—Ä–æ–∫ —ñ –∑–∞–º—ñ–Ω—é—î–º–æ NaN –Ω–∞ None

        # –í–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—à—ñ 100 —Ä—è–¥–∫—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ
        preview_data = data.head(500).to_dict(orient="records")  # –ü–µ—Ä–µ–¥–∞—î–º–æ –ª–∏—à–µ –ø–µ—Ä—à—ñ 100 —Ä—è–¥–∫—ñ–≤

        # –î–æ–¥–∞—î–º–æ –æ–ø–∏—Å –∫–æ–ª–æ–Ω–æ–∫
        column_summary = {
            col: {
                "type": str(dtype),
                "unique_values": data[col].unique()[:10].tolist()  # –î–æ 10 —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–æ–ª–æ–Ω–∫–∏
            }
            for col, dtype in data.dtypes.items()
        }

        # –ì–µ–Ω–µ—Ä—É—î–º–æ JSON –∑ –¥–∞–Ω–∏–º–∏
        json_data = {
            "column_summary": column_summary,
            "preview_data": preview_data
        }

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ JSON-—Ä—è–¥–æ–∫
        json_data_str = json.dumps(json_data, ensure_ascii=False)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä JSON
        if len(json_data_str) > char_limit:
            raise ValueError("–°–∫–æ—Ä–æ—á–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º–µ–Ω—à–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä –¥–∞—Ç–∞—Å–µ—Ç—É.")

        # –§–æ—Ä–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç
        full_prompt = f"""
        –£ –º–µ–Ω–µ —î —Ç–∞–±–ª–∏—Ü—è –¥–∞–Ω–∏—Ö —ñ–∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏:
        {json_data_str}

        –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø–∏—Ç–∞–≤: {prompt}
        
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ü—ñ –¥–∞–Ω—ñ, —Å—Ç–≤–æ—Ä—ñ—Ç—å JSON —Ñ–∞–π–ª, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å:
        1. –¢–∏–ø –≥—Ä–∞—Ñ—ñ–∫–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'bar', 'line', 'pie').
        2. –ú–∞—Å–∏–≤ –¥–∞–Ω–∏—Ö –¥–ª—è –æ—Å—ñ X (–í–°–Ü –©–û –ü–û–¢–†–Ü–ë–ù–û)
        3. –ú–∞—Å–∏–≤ –¥–∞–Ω–∏—Ö –¥–ª—è –æ—Å—ñ Y (–í–°–Ü –©–û –ü–û–¢–†–Ü–ë–ù–û)
        4. –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–∞—Å–∏–≤–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –æ—Å–µ–π —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ (–í–°–Ü –©–û –ü–û–¢–†–†–Ü–ë–ù–û)
        """

        # GPT-–∑–∞–ø–∏—Ç
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ –∞–Ω–∞–ª—ñ–∑—É –¥–∞–Ω–∏—Ö —ñ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó."},
                {"role": "user", "content": full_prompt}
            ]
        )

        js_chart_data = response.choices[0].message['content']

        # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å–µ –∑–∞–π–≤–µ, –∑–∞–ª–∏—à–∞—é—á–∏ –ª–∏—à–µ JSON
        js_chart_data = re.sub(r"^.*```json", "", js_chart_data, flags=re.DOTALL)
        js_chart_data = re.sub(r"```.*$", "", js_chart_data, flags=re.DOTALL)
        js_chart_data = js_chart_data.strip()

        print("\nGPT –ì–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞ JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞:\n")
        print(js_chart_data)

        return js_chart_data
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ GPT-–∑–∞–ø–∏—Ç—É: {e}")
        return None


def save_chart_data_as_json(js_chart_data, file_name="chart_data.json"):
    """–ó–±–µ—Ä—ñ–≥–∞—î JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä—É —É —Ñ–∞–π–ª."""
    try:
        with open(file_name, 'w') as f:
            f.write(js_chart_data)
        print(f"JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É —Ñ–∞–π–ª {file_name}")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è JSON: {e}")


# 2. –û—Å–Ω–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª
def main():
    print("–í—ñ—Ç–∞—î–º–æ —É Smart Data Ally –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤! üöÄ")
    file_path = input("–í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –¥–æ –≤–∞—à–æ–≥–æ CSV-—Ñ–∞–π–ª—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'data.csv'): ")
    data = load_csv(file_path)

    if data is not None:
        prompt = input(
            "–û–ø–∏—à—ñ—Ç—å, —è–∫–∏–π –≥—Ä–∞—Ñ—ñ–∫ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–±—É–¥—É–≤–∞—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤ —ñ —Å–º–µ—Ä—Ç–µ–π –ø–æ –∫—Ä–∞—ó–Ω–∞—Ö'): ")
        print("–ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö —ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è JSON...")
        js_chart_data = generate_js_chart_data(data, prompt, file_path)
        if js_chart_data:
            save_chart_data_as_json(js_chart_data)
        else:
            print("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞.")


if __name__ == "__main__":
    main()